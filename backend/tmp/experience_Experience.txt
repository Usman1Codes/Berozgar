Personal Experience Report This document summarizes my personal contributions, learnings, and achievements across the projects in my portfolio. Overview As a software engineer and AI developer, I have led end-to-end design and implementation of six diverse projects, ranging from AI-powered applications to high-performance C++ systems. My work spans full-stack development, machine learning model training, and systems programming. Project Contributions & Learnings Ai-Powered-Digital-Forensic-Investigator Architected and implemented a Retrieval-Augmented Generation chat assistant using Streamlit, FastAPI, LangChain, and ChromaDB. Designed modular components (ChatManager, FileManager, RAGSystem) for scalable document ingestion and conversational QA. Integrated multi-model support (OpenAI GPT-4/3.5, Anthropic Claude) with source attribution and conversation memory. Learned best practices in vector store management, prompt engineering, and real-time UI development. Filmception Developed a multilingual movie summary translator and TTS system with Googletrans and gTTS in a Streamlit interface. Built a DistilBERT-based multi-label genre classifier in TensorFlow, tuning thresholds to optimize F1 score. Enhanced user experience with tabbed UI, progress feedback, and audio playback. Improved understanding of natural language processing pipelines and model evaluation. Library Management System Implemented a role-based CLI application in C++ with classes for Administrator, Librarian, Student, and Janitor. Developed a hash-chain mechanism for data integrity in persistent storage. Mastered file I/O (fstream), directory handling (dirent.h), and class design in C++. Ludo Game Created a graphical Ludo game in C++ using Raylib and pthreads for multithreading. Designed a semaphore-driven synchronization scheme for concurrent player threads. Gained experience in real-time graphics, concurrency, and state management in a high-performance environment. AI-Powered Vulnerability Scanner & Remediator Processed NVD JSON feeds with Pandas, extracting CVE details and mapping CVSS scores to severity labels. Trained and evaluated a PyTorch neural network (SeverityClassifierNN) for vulnerability severity classification. Learned to orchestrate end-to-end data pipelines in Jupyter notebooks and handle large-scale JSON parsing. YouTube Video Summarizer & Q-A Tool Built a CLI tool integrating YouTube transcript API, Whisper STT, and Google Gemini for summary and interactive Q&A. Developed robust URL parsing (input_handler), transcript fetching (video_extractor), and prompt templates (gemini_helpers). Optimized dependency management with lazy imports to reduce user overhead. Strengthened skills in CLI design, error handling, and API integration. Key Skills & Technologies Languages: Python (3.9+), C++17 Frameworks & Libraries: Streamlit, FastAPI, LangChain, TensorFlow, PyTorch, Raylib AI & NLP: OpenAI GPT, Anthropic Claude, Google Gemini, Whisper, transformer-based models Data & Storage: Pandas, ChromaDB, Redis, file-based persistence, hashing DevOps & Tooling: Docker, dotenv, pytest, Jupyter Notebook, CLI design Principles: Modular design, prompt engineering, concurrency, data integrity, UI/UX best practices Conclusion Through these projects, I have demonstrated end-to-end development capabilitiesâ€”from prototyping AI-driven features to building production-ready systems. My portfolio reflects a deep understanding of modern machine learning workflows, scalable architectures, and user-centered design.